#
# ~/Documents/code/scripts/scripts-n-stuff/bashrc_funcs
#

# split-tunnel program
function exclude {
    nohup mullvad-exclude "$1" &
}

# mullvad split-tunneled processes
function splitted {
    # get the process list
    # pid list | skip first line | ps: pid -> command
    local processlist="$(mullvad split-tunnel list | awk 'NR>1' | xargs -r -I _ ps -q _ -o comm=)"
    [[ -z "$processlist" ]] && echo "no excluded processes" && return

    printf '%s excluded processes:\n' $(wc -l <<< "$processlist") # linecount
    if [[ "$1" == 'all' ]]; then
        sort <<< "$processlist"
    else
        sort -u <<< "$processlist"
    fi
}

# find and open rc/config files
function editrc {
    local pattern
    case "$1" in
          bash) pattern='.*(\bbash|bash\b).*';;
        bashrc) pattern='.*(\bbashrc|bashrc\b).*';;
            -p) [[ -n "$2" ]] && pattern="$2" || read -r -p 'pattern=' pattern;;
             *) pattern='.*(\brc|rc\b|_rc|rc_).*'
    esac
    local rcfiles="$(find ~/ -maxdepth 1 -regextype egrep -iregex "$pattern" -printf '%f\n')"
    local rc REPLY IFS=$'\n'
    select rc in $(sort <<< "$rcfiles"); do break; done
    ${EDITOR:-'vi'} "$rc"
}

# update with news
function update-arch-btw {
    if [[ "$1" =~ ^('-h'|'--help'|'help')$ ]]; then
        if [[ -n "$(command -v ansi-format)" ]]; then
            local ul="$(ansi-format -s underline)"
            local nul="$(ansi-format --undo=underline)"
        fi
        printf 'Usage: update-arch-btw [-h|--help|help] [%bBROWSER%b]\n' $ul $nul 
        printf '%s\n' 'Examples:' '$ update-arch-btw' '$ update-arch-btw chromium'
        printf 'If %bBROWSER%b is not specified, BROWSER environment\n' $ul $nul
        printf 'variable (if set) is used as a default.\n'
        return
    fi

    # PAGE LIST
    local -A pages
    pages['all']=''
    pages['eos']='https://forum.endeavouros.com/latest'
    #pages['garuda']='https://garudalinux.org/blog'
    pages['arch']='https://archlinux.org/news/'
    pages['aur']='https://lists.archlinux.org/archives/list/aur-general@lists.archlinux.org/latest'
    pages['none']=''
    local pagelist="$(printf '%s\n' "${!pages[@]}" | sort)" # !pages gets the keys

    # UPDATE COMMANDS
    local -a updatefuncs
    updatefuncs+=('yay')
    updatefuncs+=('pacman -Syu')
    updatefuncs+=('eos-update')
    #updatefuncs+=('garuda-update')
    updatefuncs+=('skip')

    # BROWSERS
    local -a browserlist
    browserlist+=('firefox')
    browserlist+=('chromium')
    browserlist+=('mullvad-browser')
    #browserlist+=('librewolf')
    browserlist+=('other')
    local thebrowser=${1:-"$BROWSER"}

    # choose page
    local PS3 webpage
    printf -v PS3 '\n%s' '(press ENTER to reprint the options)' '>'
    select webpage in $pagelist
    do
        [[ "$webpage" == 'none' ]] && break
        # check the browser
        while [[ ! -x "$(command -v "$thebrowser")" ]];
        do
            printf 'Could not launch %s! Try something else:' "$thebrowser"
            select thebrowser in "${browserlist[@]}"
            do
                if [[ "$thebrowser" == 'other' ]]; then
                    read -r -p 'browser: ' thebrowser
                fi
                break
            done
        done
        # open the page(s)
        case "$webpage" in
            all) $thebrowser ${pages[@]} 2>/dev/null; break;;
              *) $thebrowser ${pages[$webpage]} 2>/dev/null
        esac
    done
    # start the update
    local func
    select func in "${updatefuncs[@]}"
    do
        [[ "$func" == 'skip' ]] && break
        if [[ -x "$(command -v "$func")" ]]; then
            $func
            break
        fi
    done
}

