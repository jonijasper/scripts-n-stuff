#
# ~/.bashrc_funcs
#

function get-splashed {
# screenfetch opts: distro host kernel uptime pkgs shell res de wm wmtheme gtk disk cpu gpu mem
    case "$1" in
        yall)
            if [[ $COLUMNS -le 100 ]]; then
                screenfetch -p
            else
                screenfetch
            fi
            ;;

        *)
            if [[ $COLUMNS -le 100 ]]; then
                screenfetch -d -pkgs,res,de,wm,wmtheme,gtk -p
            else
                screenfetch -d -pkgs,res,de,wm,wmtheme,gtk 
            fi
            ;;
    esac
}

function get-prompted {
    # non printables inside \[ \]
    # or \001 \002 for printf ???
    #
    local goat='\U1f410' 
    if [[ -n "$(command -v ansi-format)" ]]; then
        local res="\[$(ansi-format)\]"
        local dcn="\[$(ansi-format -s normal -c default)\]"
        local dcb="\[$(ansi-format -s bold -c default)\]"
        local cyn="\[$(ansi-format -s normal -c cyan)\]"
        local cyb="\[$(ansi-format -s bold -c cyan)\]"
        local whn="\[$(ansi-format -s normal -c white)\]"
        local whb="\[$(ansi-format -s bold -c white)\]"
        local mab="\[$(ansi-format -s bold -c magenta)\]"
        local yeb="\[$(ansi-format -s bold -c yellow)\]"
    fi
    # ─ │ ┌ └ ┘ ┐ ┤ ├ ┴ ┬ ┼
    #  ┃ ┏ ━ ┣ ┗ ┫
    # ═ ║ ╒ ╕ ╓ ╖ ╔ ╗ ╘ ╛ ╙ ╜ ╚ ╝ ╞ ╡ ╟ ╢ ╠ ╣ ╥ ╨ ╧ ╤ ╦ ╩ ╪ ╫ ╬
    #  ╭ ╮ ╰ ╯
    case "$1" in

        ps0)
            printf '%s' $res 
            ;;

        eosgoat)
            printf '%s' $mab
            printf '┌( %s>\[$BASH_COMMAND\] %s)─[ %s\[$?\] %s]\n' $yeb $mab $yeb $mab 
            printf '│\n'
            printf '├┤%s\A%s├─(%s\\u%s@%s\h%s)\n%s' $cyn $mab $cyb $dcb $cyb $mab $mab
            printf '└─ %b%s\w\$ %s' $goat $dcn $dcb
            ;;
        
        eosgoat2)
            printf '%s' $mab
            printf '┌─( %s>\[$BASH_COMMAND\] %s)─[ %s\[$?\] %s]\n' $yeb $mab $yeb $mab 
            printf '│\n'
            printf '├┤%s\\u%s@%s\h%s├─( %s\w %s)\n%s' $cyb $dcb $cyb $mab $dcn $mab $mab
            printf '└────(%s\A%s)────┘%b%s\$ %s' $cyn $mab $goat $dcn $dcb
            ;;

        spagoatti)
            printf '%s' $mab
            printf '└─┬─( %s>\[$BASH_COMMAND\]%s )─[ %s\[$?\]%s ]\n' $yeb $mab $yeb $mab 
            printf '%b└──────────────┐\n' $goat
            printf '┌─%s\\u%s@%s\h%s─┴─(%s\w%s)\n%s' $cyb $dcb $cyb $mab $dcn $mab $mab
            printf '├[%s\A%s]─%s\$ %s' $cyn $mab $dcn $dcb
            ;;

        goat)
            printf '\n┌───[ %s\\u@\h%s ]─( %s\w%s )' $cyn $sres $cyn $sres
            printf '\n│ \A %s \d' $goat
            printf '\n└─ \$ '
            ;;

        color)
            printf '[\A]%s\\u%s@%s\h%s:\w\$ ' $cyn $res $cyn $res
            ;;
            
        *)
            printf '[\A]\\u@\h:\w\$ '
            ;;
    esac
}

# split plex browser
function plex {
    local plexbrowser
    if [[ -n "$1" ]]; then
        plexbrowser="$1"
    elif [[ -n "$BROWSER" ]]; then
        plexbrowser="$BROWSER"
    else
        plexbrowser='firefox'
    fi
    nohup mullvad-exclude $plexbrowser &
}

# mullvad excluded/split-tunneled processes
function splitted {
    local processlist="$(mullvad split-tunnel list | awk 'NR>1' | xargs -r -I _ ps -q _ -o comm=)"
    if [[ -n "$processlist" ]]; then
        local processnum=$(wc -l <<< "$processlist")
        echo "mullvad excluded processes: $processnum"
        case "$1" in
            all)    printf '%s\n̈́' "$processlist" | sort;;
              *)    printf '%s\n̈́' "$processlist" | sort -u;;
        esac
    else
        echo "no excluded processes"
    fi
}

# gpu runtime info
function gpu-info {
    local device
    for i in {0..1}
    do
        device="/sys/class/drm/card$i/device"
        echo "Driver: $(grep driver "$device/uevent")"
        echo "power_state: $(cat $device/power_state)"
        echo "runtime_status: $(cat $device/power/runtime_status)"
        echo "runtime_suspended_time: $(cat $device/power/runtime_suspended_time)"
    done
}

# show pacman cache
#function paccache-show {
#  paccache -duvk1 $(find ~/.cache/yay/ -mindepth 1 -maxdepth 1 -type d | xargs -r printf "-c %s ")
#}

