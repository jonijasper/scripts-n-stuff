#
# ~/.update_arch_btw
#

function update-arch-btw {
    if [[ "$1" =~ ^('-h'|'--help'|'help')$ ]]; then
        if [[ -n "$(command -v ansi-format)" ]]; then
            local ul="$(ansi-format -s underline)"
            local nul="$(ansi-format --undo=underline)"
        fi
        printf 'Usage: update-arch-btw [-h|--help|help] [%bBROWSER%b]\n' $ul $nul 
        printf '%s\n' 'Examples:' '$ update-arch-btw' '$ update-arch-btw chromium'
        printf 'If %bBROWSER%b is not specified, BROWSER environment\n' $ul $nul
        printf 'variable (if set) is used as a default.\n'
        return
    fi

### PAGE LIST
    local -A pages
    pages['all']=''
    pages['eos']='https://forum.endeavouros.com/latest'
    #pages['garuda']='https://garudalinux.org/blog'
    pages['arch']='https://archlinux.org/news/'
    pages['aur']='https://lists.archlinux.org/archives/list/aur-general@lists.archlinux.org/latest'
    pages['none']=''

### UPDATE COMMANDS
    local -a updatefuncs
    updatefuncs+=('yay')
    updatefuncs+=('pacman -Syu')
    updatefuncs+=('eos-update')
    #updatefuncs+=('garuda-update')
    updatefuncs+=('skip')

### BROWSERS
    local -a browserlist
    browserlist+=('firefox')
    browserlist+=('chromium')
    browserlist+=('mullvad-browser')
    #browserlist+=('librewolf')
    browserlist+=('other')

    local thebrowser=${1:-"$BROWSER"}
    local pagelist="$(printf '%s\n' "${!pages[@]}" | sort)" # !pages gets the keys
    local PS3 webpage
    printf -v PS3 '\n%s' '(press ENTER to reprint the options)' '>'

    select webpage in $pagelist
    do
        [[ "$webpage" == 'none' ]] && break

        # check the browser
        while [[ ! -x "$(command -v "$thebrowser")" ]];
        do
            printf 'Could not launch %s! Try something else:' "$thebrowser"
            select thebrowser in "${browserlist[@]}"
            do
                if [[ "$thebrowser" == 'other' ]]; then
                    read -r -p 'browser: ' thebrowser
                fi
                break
            done
        done

        # open the page(s)
        case "$webpage" in
            all) $thebrowser ${pages[@]} 2>/dev/null; break;;
              *) $thebrowser ${pages[$webpage]} 2>/dev/null
        esac
    done

    # update
    local func
    select func in "${updatefuncs[@]}"
    do
        [[ "$func" == 'skip' ]] && break
        if [[ -x "$(command -v "$func")" ]]; then
            $func
            break
        fi
    done
}

